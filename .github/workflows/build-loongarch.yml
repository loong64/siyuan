name: CD For SiYuan LoongArch

on:
  push:
    tags:
      - 'v*.*.*'
    branches: 
      - "master"
  workflow_dispatch:

# ref https://docs.github.com/zh/actions/learn-github-actions/variables
env:
  repo_name: "siyuan"
  repo_owner: "multiarchstore"
  package_json: "app/package.json"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}
    strategy:
      matrix:
        config:
          - os: ubuntu-22.04
            name: ubuntu build linux.tar.gz
            kernel_path: "../app/kernel-linux/SiYuan-Kernel"
            build_args_prefix: "-s -w -X"
            build_args_suffix: "Mode=prod"
            electron_args: "dist-linux-loong64"
            goos: "linux"
            goarch: "loong64"
            suffix: "linux.tar.gz"
    steps:
    - uses: actions/checkout@v4
      with:
        path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}

    # - name: Set up MingGW
    #   uses: msys2/setup-msys2@v2
    #   if: "contains( matrix.config.goos, 'windows')"
    #   with:
    #     install: p7zip mingw-w64-x86_64-lua

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/kernel/go.mod
    - run: go version

    # - name: Set up goversioninfo
    #   run: go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo && go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo
    #   if: "contains( matrix.config.goos, 'windows')"
    #   working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/kernel
    #   env:
    #     GO111MODULE: on
    #     CGO_ENABLED: 1
    #     GOOS: ${{ matrix.config.goos }}
    #     GOPATH: ${{ github.workspace }}/go
    #     GOARCH: ${{ matrix.config.goarch }}

    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - uses: mlugg/setup-zig@v2

    - name: Install Node pnpm
      run: npm install -g pnpm
      working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app

    - name: Install Node Dependencies
      run: |
        electron_use_remote_checksums=1 pnpm install --no-frozen-lockfile
      working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app

    - name: Building UI
      run: pnpm run build
      working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app

    - name: Remove Build Directory
      uses: JesseTG/rm@v1.0.2
      with:
        path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/build

    - name: Remove Kernel Directory for Linux
      uses: JesseTG/rm@v1.0.2
      with:
        path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/kernel-linux

    - name: Remove Kernel Directory for Windows
      uses: JesseTG/rm@v1.0.2
      with:
        path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/kernel

    - name: Remove Kernel Directory for macOS
      uses: JesseTG/rm@v1.0.2
      with:
        path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/kernel-darwin

    - name: Remove Kernel Directory for macOS ARM64
      uses: JesseTG/rm@v1.0.2
      with:
        path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/kernel-darwin-arm64

    # - name: Generate Icon Resource and Properties/Version Info For Windows
    #   run: ${{ github.workspace }}\go\${{ matrix.config.gobin }}\goversioninfo -platform-specific=true -icon="resource\icon.ico" -manifest="resource\goversioninfo.exe.manifest"
    #   if: contains( matrix.config.goos, 'windows')
    #   working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/kernel
    
    - name: Building Kernel
      run: go build --tags fts5 -o "${{ matrix.config.kernel_path }}" -v -ldflags "${{ matrix.config.build_args_prefix }} github.com/${{ env.repo_owner }}/${{ env.repo_name }}/kernel/util.${{ matrix.config.build_args_suffix }} -linkmode=external -extldflags=-static"
      working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/kernel
      env:
        GO111MODULE: on
        CGO_ENABLED: 1
        GOOS: ${{ matrix.config.goos }}
        GOPATH: ${{ github.workspace }}/go
        GOARCH: ${{ matrix.config.goarch }}
        CC: "zig cc -target loongarch64-linux-musl -I. -L/usr/local/musl/lib -lunwind"
      
    - name: Building Electron App
      run: pnpm run ${{ matrix.config.electron_args }}
      working-directory: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app

    - name: Upload assets to beta release
      uses: softprops/action-gh-release@v2
      if: contains( github.ref, 'refs/tags')
      with:
          files: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/build/*
          prerelease: false
          tag_name:  ${{ github.ref_name }}

    # - name: Upload Release
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ needs.create_release.outputs.upload_url }}
    #     asset_name: siyuan-${{ needs.create_release.outputs.release_version }}-${{ matrix.config.suffix }}
    #     asset_path: ${{ github.workspace }}/go/src/github.com/${{ env.repo_owner }}/${{ env.repo_name }}/app/build/siyuan-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
    #     asset_content_type: application/octet-stream
